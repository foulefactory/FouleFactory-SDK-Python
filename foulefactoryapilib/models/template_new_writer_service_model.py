# -*- coding: utf-8 -*-

"""
    foulefactoryapilib.models.template_new_writer_service_model
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/16/2016
"""
from .template_instruction_writer_service_model import TemplateInstructionWriterServiceModel
from .template_column_writer_service_model import TemplateColumnWriterServiceModel
from .template_question_writer_service_model import TemplateQuestionWriterServiceModel
from .base_model import BaseModel

class TemplateNewWriterServiceModel(BaseModel):

    """Implementation of the 'TemplateNewWriterServiceModel' model.

    TODO: type model description here.

    Attributes:
        id_project_type (int): TODO: type description here.
        title (string): TODO: type description here.
        description (string): TODO: type description here.
        instructions (list of TemplateInstructionWriterServiceModel): TODO:
            type description here.
        columns (list of TemplateColumnWriterServiceModel): TODO: type
            description here.
        questions (list of TemplateQuestionWriterServiceModel): TODO: type
            description here.

    """

    def __init__(self, 
                 id_project_type = None,
                 title = None,
                 description = None,
                 instructions = None,
                 columns = None,
                 questions = None):
        """Constructor for the TemplateNewWriterServiceModel class"""
        
        # Initialize members of the class
        self.id_project_type = id_project_type
        self.title = title
        self.description = description
        self.instructions = instructions
        self.columns = columns
        self.questions = questions

        # Create a mapping from Model property names to API property names
        self.names = {
            "id_project_type" : "IdProjectType",
            "title" : "Title",
            "description" : "Description",
            "instructions" : "Instructions",
            "columns" : "Columns",
            "questions" : "Questions",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            id_project_type = dictionary.get("IdProjectType")
            title = dictionary.get("Title")
            description = dictionary.get("Description")
            instructions = None
            if dictionary.get("Instructions") != None:
                instructions = list()
                for structure in dictionary.get("Instructions"):
                    instructions.append(TemplateInstructionWriterServiceModel.from_dictionary(structure))
            columns = None
            if dictionary.get("Columns") != None:
                columns = list()
                for structure in dictionary.get("Columns"):
                    columns.append(TemplateColumnWriterServiceModel.from_dictionary(structure))
            questions = None
            if dictionary.get("Questions") != None:
                questions = list()
                for structure in dictionary.get("Questions"):
                    questions.append(TemplateQuestionWriterServiceModel.from_dictionary(structure))
            # Return an object of this model
            return cls(id_project_type,
                       title,
                       description,
                       instructions,
                       columns,
                       questions)
